/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var tape = require( 'tape' );
var tryRequire = require( '@stdlib/utils/try-require' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var abs = require( '@stdlib/math/base/special/abs' );
var EPS = require( '@stdlib/constants/float64/eps' );


// FIXTURES //

var pdata = require( './fixtures/python/data.json' );
var rdata = require( './fixtures/r/data.json' );


// VARIABLES //

var cdf = tryRequire( resolve( __dirname, './../lib/native.js' ) );
var opts = {
	'skip': ( cdf instanceof Error )
};


// TESTS //

tape( 'main export is a function', opts, function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof cdf, 'function', 'main export is a function' );
	t.end();
});

tape( 'if provided `NaN` for any parameter, the function returns `NaN`', opts, function test( t ) {
	var y = cdf( NaN, 2.0, 10.0 );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = cdf( 5.0, NaN, 10.0 );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = cdf( 5.0, 2.0, NaN );
	t.equal( isnan( y ), true, 'returns NaN' );
	t.end();
});

tape( 'if provided `x < r`, the function returns `0`', opts, function test( t ) {
	var y = cdf( 1.0, 2.0, 10.0 );
	t.equal( y, 0.0, 'returns 0' );
	t.end();
});

tape( 'if provided `x >= v`, the function returns `1`', opts, function test( t ) {
	var y = cdf( 10.0, 2.0, 10.0 );
	t.equal( y, 1.0, 'returns 1' );

	y = cdf( Infinity, 2.0, 10.0 );
	t.equal( y, 1.0, 'returns 1' );
	t.end();
});

tape( 'if provided `r >= v`, the function returns `NaN`', opts, function test( t ) {
	var y = cdf( 5.0, 10.0, 10.0 );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = cdf( 5.0, 12.0, 10.0 );
	t.equal( isnan( y ), true, 'returns NaN' );
	t.end();
});

tape( 'the function evaluates the CDF using Python-generated data', opts, function test( t ) {
	var expected = pdata.expected;
	var delta;
	var tol;
	var r = pdata.r;
	var v = pdata.v;
	var x = pdata.x;
	var y;
	var i;

	for ( i = 0; i < x.length; i++ ) {
		y = cdf( x[ i ], r[ i ], v[ i ] );
		if ( y === expected[ i ] ) {
			t.equal( y, expected[ i ], 'r: '+r[ i ]+', v: '+v[ i ]+', x: '+x[ i ]+', y: '+y+', expected: '+expected[ i ] );
		} else {
			delta = abs( y - expected[ i ] );
			tol = 2.0 * EPS * abs( expected[ i ] );
			t.ok( delta <= tol, 'within tolerance. r: '+r[ i ]+'. v: '+v[ i ]+'. x: '+x[ i ]+'. y: '+y+'. expected: '+expected[ i ]+'. Δ: '+delta+'. tol: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the CDF using R-generated data', opts, function test( t ) {
	var expected = rdata.expected;
	var delta;
	var tol;
	var r = rdata.r;
	var v = rdata.v;
	var x = rdata.x;
	var y;
	var i;

	for ( i = 0; i < x.length; i++ ) {
		y = cdf( x[ i ], r[ i ], v[ i ] );
		if ( y === expected[ i ] ) {
			t.equal( y, expected[ i ], 'r: '+r[ i ]+', v: '+v[ i ]+', x: '+x[ i ]+', y: '+y+', expected: '+expected[ i ] );
		} else {
			delta = abs( y - expected[ i ] );
			tol = 2.0 * EPS * abs( expected[ i ] );
			t.ok( delta <= tol, 'within tolerance. r: '+r[ i ]+'. v: '+v[ i ]+'. x: '+x[ i ]+'. y: '+y+'. expected: '+expected[ i ]+'. Δ: '+delta+'. tol: '+tol+'.' );
		}
	}
	t.end();
});
